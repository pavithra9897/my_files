CREATE EC2-INSTANCE:

ssh-keygen -t rsa -b 4096
  password-pavi
 cd .ssh --> id_rsa.pub & id_rsa  (public and private saved in this folder)
   sudo vim id_rsa.pub --> copy the key

open ec2 --> keypair - action - import key --- paste the public key copied from id_rsa.pub
create ec2 instance  -- select keypair we created

open ubuntu terminal -- cd .ssh/
                     -- ssh -i "id_rsa" ubuntu@instance public ip



mount volume in terminal:
    create extra volume and attach to ec2 instance
    in ubuntu terminal,
             (https://devopscube.com/mount-ebs-volume-ec2-instance/)
           sudo mkfs -t ext4 /dev/xvdf
           sudo mkdir /volumewordpress1
           lsbllk -fs  (uuid created)
           sudo vi /etc/fstab
           sudo mount -av

        ---------------------------------------------
           sudo mount /dev/xvdf /volumewordpress1/
           cd /nolumewordpress1
           df -h .
    to mount permantely,
        lsblk -fs    (uuid will created)
           e2label /dev/xvdf "LABEL001"
           sudo blkid --> shows label mounted
           cd /etc/
              sudo vim fstag
                 LABEL=LABELWP  /volumewoedpress1   defaults  1 0  --> cretaed like this
cd volumewordpress1/

sudo apt update
sudo apt install nginx
sudo systemctl start nginx
sudo systemctl enable nginx
sudo systemctl status nginx
   --> copy public-ip ---> opens nginx test page.
sudo apt install mariadb-server -y
sudo systemctl start mariadb
sudo systemctl enable mariadb
sudo mysql_secure_installation
sudo apt install php -y
sudo apt install php-mysql php-gd php-common php-mbstring php-curl php-cli -y
sudo systemctl restart nginx
sudo apt install php8.1-fpm -y
    open chrome - wordpress download - copy link and paste it on terminal
sudo wget (https://wordpress.org/latest.zip)
  ls  --> shows wordpress
  unzip it  ; sudo apt install unzip -y  ; sudo unzip (latest.zip)
    ls
 sudo mv wordpress/* /var/www/html/
cd /var/www/html/
   ls -l ;  sudo rm -rf index.html index.nginx-debain.html ;

cd /etc/nginx/sites-availabe/
  sudo vim wordpress.conf

##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
        listen 80 default_server;
        listen [::]:80 default_server;

        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.php;

        server_name _;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ /index.php?$args;
        }

        # pass PHP scripts to FastCGI server
        #
        location ~ \.php$ {
                include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
                fastcgi_pass unix:/run/php/php8.1-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
                deny all;
        }
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#       listen 80;
#       listen [::]:80;
#
#       server_name example.com;
#
#       root /var/www/example.com;
#       index index.html;
#
#       location / {
#               try_files $uri $uri/ =404;
#       }


   --------------------------------------------
     server {
        listen 80;
        listen [::]:80;

        root /var/www/h tml;
        index index.php;
        server_name _;

        location / {
                try_files $uri $uri/ /index.php?$args;
                fastcgi_pass unix:/var/run/php/php8.1-fpm-sock;
        }

           location ~ /\.ht {
                deny all;
        }
      }
    -------------------------------------------------------------


    server {
            listen 80;
            root /backup/wordpress;
            index index.php index.html;
            server_name affu.com;
	    access_log /var/log/nginx/my.access.log;
    	    error_log /var/log/nginx/my.error.log;
            location / {
                         try_files $uri $uri/ =404;
            }
            location ~ \.php$ {
                         include snippets/fastcgi-php.conf;
                         fastcgi_pass unix:/run/php/php7.4-fpm.sock;
            }
            location ~ /\.ht {
                         deny all;
            }
            location = /favicon.ico {
                         log_not_found off;
                         access_log off;
            }
            location = /robots.txt {
                         allow all;
                         log_not_found off;
                         access_log off;
           }
            location ~* \.(js|css|png|jpg|jpeg|gif|ico)$ {
                         expires max;
                         log_not_found off;
           }
}

--------------------------------------------------------------------------


ln -s /etc/nginx/sites-availabe/wordpress.conf /etc/nginx/sites-enabled
cd sites-enabled  ; ls -l  ; wordpress.conf    default   ; rm -rf default
sudo nginx -t
sudo systemctl reload nginx

open ip ---> opens wordpress page
 in terminal ;  sudo mysql -u root -p
  pavi@123
    create database wordpressmain;
    create user 'wordusermain'@'localhost' identified by 'pavi@123';
    grant all privileges on wordpressmain.* to 'wordusermain'@'localhost';

    flush privileges;
    exit

sudo chown -R www-data:www-data /var/www/html/

 change the users credentials in wordpress page in browser
cd /var/www/html/
  sudo vi wp-config-sample.php
      give the correct databse into this file.

      sudo curl -s https://api.wordpress.org/secret-key/1.1/salt/
         copy the given credentials and paste it on wp-config-sample.php

sudo systemctl reload nginx.service
sudo nginx -t

open terminal- wordpress page   ------> now wordpress page opens..

------------------------------------------------------------------------------------------------------------------------------------
